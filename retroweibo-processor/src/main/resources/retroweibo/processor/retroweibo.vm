## Template for each generated RetroWeibo_Foo class.
## This template uses the Apache Velocity Template Language (VTL).
## The variables ($pkg, $props, and so on) are defined by the fields of MutableRetroWeiboTemplateVars.
##
## Comments, like this one, begin with ##. The comment text extends up to and including the newline
## character at the end of the line. So comments also serve to join a line to the next one.
## Velocity deletes a newline after a directive (#if, #foreach, #end etc) so ## is not needed there.
## That does mean that we sometimes need an extra blank line after such a directive.
##
## A post-processing step will remove unwanted spaces and blank lines, but will not join two lines.

#if (!$pkg.empty)
package $pkg;
#end

#foreach ($i in $imports)
import $i;
#end

import android.util.Log;
import com.bluelinelabs.logansquare.LoganSquare;
import com.sina.weibo.sdk.auth.*;
import com.sina.weibo.sdk.auth.sso.*;
import com.sina.weibo.sdk.exception.*;
import com.sina.weibo.sdk.net.*;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collection;
import java.util.Collections;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;
import org.json.JSONException;
import org.json.JSONObject;
import rx.android.app.*;
import rx.functions.*;
import rx.Observable;
import rx.Subscriber;
import android.os.Bundle;
import android.text.TextUtils;
import android.content.Intent;
import android.content.Context;
import android.app.Activity;
import android.content.pm.PackageManager;
import android.content.pm.ApplicationInfo;

import com.sina.weibo.simple.AccessToken; ## // FIXME hardcode

${gwtCompatibleAnnotation}
public final class $subclass$formalTypes extends $origClass$actualTypes {

    private Activity activity;
    private Context context;
    private String appId;
    private String redirectUrl;
    private SsoHandler ssoHandler;
    private AccessToken accessToken;

    private static final String ACCESS_TOKEN = "access_token"; // AbsOpenAPI.KEY_ACCESS_TOKEN
    private static final String HTTPS_WEIBO_API_2 = "https://api.weibo.com/2"; // AbsOpenAPI.API_SERVER
    private static final String GET = "GET";  // AbsOpenAPI.HTTPMETHOD_GET
    private static final String POST = "POST";
    private static final String DELETE = "DELETE";

    private static final String APPLICATION_ID_PROPERTY = "com.sina.weibo.sdk.ApplicationId";
    private static final String REDIRECT_URL_PROPERTY = "com.sina.weibo.sdk.RedirectUrl";

## Constructor

    public $subclass(Activity activity) {
        this.activity = activity;
        this.context = activity;
        this.appId = getMetaData(activity, APPLICATION_ID_PROPERTY);
        this.redirectUrl = getMetaData(activity, REDIRECT_URL_PROPERTY);
        // null ? throw new IllegalArgumentException()
    }

## Property getters

#foreach ($p in $props)

    @Override
    ${p.access}${p.type} ${p.getter}(${p.args}) {

#if ($p.permissions.isEmpty())

        final List<String> permissions = Collections.emptyList();

#else

        final List<String> permissions = Arrays.asList(
#foreach ($permission in $p.permissions)

            "$permission" #if ($foreach.hasNext) , #end
#end      );
#end

#if ($p.callback)

        Observable<$p.callbackType> obs =

#else
        ${p.type} obs =

#end

        AppObservable.bindActivity(activity, Observable.defer(new Func0<Observable<AccessToken>>() {
            @Override public Observable<AccessToken> call() {
                return _logInWithPermissions(permissions);
            }
        }).map(new Func1<AccessToken, WeiboParameters>() {
            @Override public WeiboParameters call(AccessToken accessToken) {
                ${subclass}${formalTypes}.this.accessToken = accessToken;
                android.util.Log.d("RetroWeibo", "weiboParameters");

                WeiboParameters params = new WeiboParameters(appId);
                params.put(ACCESS_TOKEN, accessToken.token());
                android.util.Log.d("RetroWeibo", "weiboParameters:token: " + accessToken.token());

#set ($map = ${p.queries})
#set ($maps = ${p.queryMaps})
#set ($bundles = ${p.queryBundles})
#if (!$map.isEmpty() || !$maps.isEmpty() || !$bundles.isEmpty())

  #foreach ($query in $map.entrySet())

                _put(params, $query.key, $query.value);

  #end
  #foreach ($queryMap in $maps)

                _put(params, ${queryMap});

  #end
  ##foreach ($queryBundle in $bundles)

                ##bundle.putAll(${queryBundle});

  ##end

                return params;

#elseif ($p.post)

  #if (!$p.body.empty)

                ## // TODO return ${p.body}.toBundle();
                return params;

  #else

                return params;

  #end

#else

                return params;

#end

            }
        }).flatMap(new Func1<WeiboParameters, Observable<String>>() {
            @Override public Observable<String> call(WeiboParameters params) {

#if ($p.get)

                return Observable.create(new OnSubscribeWeibo(context, HTTPS_WEIBO_API_2 + ${p.path}, params, GET));

#elseif ($p.post)

                return Observable.create(new OnSubscribeWeibo(context, HTTPS_WEIBO_API_2 + ${p.path}, params, POST));

#elseif ($p.delete)

                return Observable.create(new OnSubscribeWeibo(context, HTTPS_WEIBO_API_2 + ${p.path}, params, DELETE));
#end

            }
        }).flatMap(new Func1<String, Observable<$p.typeArgs>>() {
            @Override public Observable<${p.typeArgs}> call(String json) {
                // TODO check "data" field to determine parse group or item.
                ${p.typeArgs}List group = null;
                try {
                    Log.d("RetroWeibo", "${p.typeArgs}List: " + json);
                    group = LoganSquare.parse(json, AutoJson_${p.typeArgs}List.class);
                } catch (java.io.IOException e) {
                    e.printStackTrace();
                    return Observable.empty();
                }

                if (group != null && group.data() != null) return Observable.from(group.data());

                try {
                  return Observable.<${p.typeArgs}>just(LoganSquare.parse(json, AutoJson_${p.typeArgs}.class));
                } catch (java.io.IOException e) {
                    return Observable.empty();
                }
            }
        }).filter(new Func1<${p.typeArgs}, Boolean>() {
            @Override public Boolean call(${p.typeArgs} item) {
                return item != null;
            }
        }));

#if ($p.callback)

        obs.toList().subscribe(new Action1<List<$p.callbackType>>() {
                @Override public void call(List<$p.callbackType> list) {
                    ${p.callbackArg}.onCompleted(list);
                }
            }, new Action1<Throwable>() {
                @Override public void call(Throwable e) {
                    ${p.callbackArg}.onError(e);
                }
            });
#else

        return obs;

#end
    }

#end

    private static class OnSubscribeWeibo implements Observable.OnSubscribe<String> {
        private static final int DEFAULT_LIMIT = 30;
        private static final String COUNT = "count";
        private static final String PAGE = "page";
        private static final String CURSOR = "cursor";
        private int page = 1;
        private String cursor = "0";
        private Context context;
        private String url;
        private WeiboParameters params;
        private String method;

        public OnSubscribeWeibo(Context context, String url, WeiboParameters params, String method) {
            this.context = context;
            this.params = params;
            this.method = method;
            this.url = url;
        }

        private void request(int page, String cursor, RequestListener listener) {
            params.put(COUNT, DEFAULT_LIMIT);
            params.put(PAGE, page);
            params.put(CURSOR, cursor);
            new AsyncWeiboRunner(context).requestAsync(
                url,
                params,
                GET,
                listener
            );
        }

        @Override
        public void call(final Subscriber<? super String> sub) {
            RequestListener listener = new RequestListener() {
                @Override public void onComplete(String json) {
                    sub.onNext(json);

                    cursor = getNextCursor(json);
                    if ("0".equals(cursor)) {
                        sub.onCompleted();
                    } else {
                        request(page++, cursor, this);
                    }
                }
                @Override public void onWeiboException(WeiboException e) {
                    sub.onError(e);
                }
            };
            request(page++, cursor, listener);
        }
    }

    private static <T> T _cast(Object o) {
        return (T) o;
    }

    private static void _put(WeiboParameters params, Map<String, String> map) {
        for (Map.Entry<String, String> entry : map.entrySet()) {
            android.util.Log.d("RetroWeibo", entry.getKey() + ":" + entry.getValue());
            params.put(entry.getKey(), entry.getValue());
        }
    }

    private static void _put(WeiboParameters params, String key, String value) {
        android.util.Log.d("RetroWeibo", key + ":" + value);
        params.put(key, value);
    }
    private static void _put(WeiboParameters params, String key, int value) {
        android.util.Log.d("RetroWeibo", key + ":" + value);
        params.put(key, value);
    }
    private static void _put(WeiboParameters params, String key, long value) {
        android.util.Log.d("RetroWeibo", key + ":" + value);
        params.put(key, value);
    }
    private static void _put(WeiboParameters params, String key, boolean value) {
        _put(params, key, value ? 1 : 0);
    }
    private static void _put(WeiboParameters params, String key, android.graphics.Bitmap value) {
        android.util.Log.d("RetroWeibo", key + ":" + value);
        params.put(key, value);
    }
    private static void _put(WeiboParameters params, String key, Object value) {
        android.util.Log.d("RetroWeibo", key + ":" + value);
        params.put(key, value);
    }
    private static void _put(WeiboParameters params, String key, Object[] values) {
        _put(params, key, TextUtils.join(",", values));
    }

    private Observable<AccessToken> _logIn() {
        return logInWithPermissions(
            "email",
            "direct_messages_read",
            "direct_messages_write",
            "friendships_groups_read",
            "friendships_groups_write",
            "statuses_to_me_read",
            "follow_app_official_microblog",
            "invitation_write"
        );
    }

    public Observable<AccessToken> _logInWithPermissions(String... permissions) {
        return _logInWithPermissions(Arrays.asList(permissions));
    }

    private Observable<AccessToken> _logInWithPermissions(final Collection<String> permissions) {
        if (accessToken == null) accessToken = AccessTokenPreferences.create(context);

        if (true) return Observable.just(accessToken);

        if (_isValid(accessToken)) {
            if (!_hasNewPermissions(accessToken, permissions)) {
                return Observable.just(accessToken);
            }
        }

        ssoHandler = new SsoHandler(activity, new AuthInfo(context, appId, redirectUrl,
                TextUtils.join(",", permissions)));
        return _logInForOauth2AccessToken(permissions).map(new Func1<Oauth2AccessToken, AccessToken>() {
            @Override public AccessToken call(Oauth2AccessToken oauth2) {
                accessToken.uid(oauth2.getUid());
                accessToken.token(oauth2.getToken());
                accessToken.refreshToken(oauth2.getRefreshToken());
                accessToken.expiresTime(oauth2.getExpiresTime());
                accessToken.phoneNum(oauth2.getPhoneNum());
                accessToken.permissions(new HashSet<>(permissions)); //accessToken.permissions(permissions.addAll(accessToken.permissions()));
                return accessToken;
            }
        });
    }

    private Observable<Oauth2AccessToken> _logInForOauth2AccessToken(Collection<String> permissions) {
        return _logInForBundle(permissions).map(new Func1<Bundle, Oauth2AccessToken>() {
            @Override public Oauth2AccessToken call(Bundle bundle) {
                return Oauth2AccessToken.parseAccessToken(bundle);
            }
        }).flatMap(new Func1<Oauth2AccessToken, Observable<Oauth2AccessToken>>() {
            @Override public Observable<Oauth2AccessToken> call(Oauth2AccessToken oauth2) {
                if (!oauth2.isSessionValid()) {
                    return Observable.error(new WeiboException("AccessToken is invalid"));
                }
                return Observable.just(oauth2);
            }
        });
    }

    private Observable<Bundle> _logInForBundle(Collection<String> permissions) {
        return Observable.create(new Observable.OnSubscribe<Bundle>() {
            @Override public void call(final Subscriber<? super Bundle> sub) {
                ssoHandler.authorize(new WeiboAuthListener() {
                    @Override public void onComplete(Bundle values) {
                        sub.onNext(values);
                        sub.onCompleted();
                    }
                    @Override public void onCancel() {
                        sub.onCompleted();
                    }
                    @Override public void onWeiboException(WeiboException e) {
                        sub.onError(e);
                    }
                });
            }
        });
    }


    private static boolean _isValid(AccessToken accessToken) {
        return !TextUtils.isEmpty(accessToken.token()); // TODO && isExpired(accessToken)
    }

    private static boolean _hasNewPermissions(AccessToken accessToken, Collection<String> permissions) {
        List<String> newPermissions = new ArrayList<>(permissions);
        newPermissions.removeAll(accessToken.permissions());
        return !newPermissions.isEmpty();
    }

    private static String _getMetaData(Context context, String key) {
        ApplicationInfo ai = null;
        try {
            ai = context.getPackageManager().getApplicationInfo(
                    context.getPackageName(), PackageManager.GET_META_DATA);
        } catch (PackageManager.NameNotFoundException e) {
            return null;
        }

        if (ai == null || ai.metaData == null) {
            return null;
        }

        return ai.metaData.getString(key);
    }

    private static String getNextCursor(String json) {
        String nextCursor = "0";
        try {
            JSONObject jsonObject = new JSONObject(json);
            nextCursor = jsonObject.optString("next_cursor", "0");
        } catch (JSONException e) {
            e.printStackTrace();
        }
        return nextCursor;
    }
}
